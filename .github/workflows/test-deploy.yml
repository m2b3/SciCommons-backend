name: Deploy Test Backend to Arbutus Cloud Instance

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: m2b3/scicommons-backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup SSH keys and known_hosts
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      # Step 3: Deploy to SERVER
      - name: Deploy to SERVER
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd SciCommons-backend-test/

            # Pull the latest changes from the test branch
            echo "Pulling the latest changes from the test branch..."
            git pull origin test

            # Create the .env file
            echo "Creating and writing the .env file with environment variables..."

            # Create or clear the .env file
            > .env.test

            # Append environment variables one by one
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}" >> .env.test
            echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env.test
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PASSWORD }}" >> .env.test
            echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env.test
            echo "EMAIL_USE_TLS=${{ secrets.EMAIL_USE_TLS }}" >> .env.test
            echo "DEFAULT_FROM_EMAIL=${{ secrets.DEFAULT_FROM_EMAIL }}" >> .env.test

            echo "FRONTEND_URL=${{ secrets.FRONTEND_TEST_URL }}" >> .env.test
            echo "ENVIRONMENT=${{ secrets.ENVIRONMENT_TEST }}" >> .env.test

            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.test
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.test
            echo "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}" >> .env.test
            echo "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}" >> .env.test
            echo "AWS_S3_CUSTOM_DOMAIN=${{ secrets.AWS_S3_CUSTOM_DOMAIN }}" >> .env.test

            echo "DB_NAME=${{ secrets.DB_NAME_TEST }}" >> .env.test
            echo "DB_USER=${{ secrets.DB_USER_TEST }}" >> .env.test
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD_TEST }}" >> .env.test
            echo "DB_HOST=${{ secrets.DB_HOST_TEST }}" >> .env.test
            echo "DB_PORT=${{ secrets.DB_PORT_TEST }}" >> .env.test
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_TEST }}" >> .env.test

            echo "CELERY_BROKER_URL=${{ secrets.CELERY_BROKER_URL_TEST }}" >> .env.test
            echo "CELERY_RESULT_BACKEND=${{ secrets.CELERY_RESULT_BACKEND_TEST }}" >> .env.test

            echo "REDIS_HOST_URL=${{ secrets.REDIS_HOST_URL_TEST }}" >> .env.test

            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env.test
            echo "CF_DNS_API_TOKEN=${{ secrets.CF_DNS_API_TOKEN }}" >> .env.test

            # Ensure the environment variables are written before proceeding
            echo ".env.test file created with environment variables."

            # Stop the current containers
            echo "Stopping the current containers..."
            docker compose -f docker-compose.staging.yml down || true

            # Start the containers using Docker Compose
            echo "Starting containers using Docker Compose..."
            docker compose -f docker-compose.staging.yml --env-file .env.test up -d --build

            echo "Deployment complete."
          EOF
